#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

if [ -z "${LOG_FACILITY}" ]; then
	LOG_FACILITY="network"
fi

LOG_LEVEL="DEBUG"

if [ -z "${LOG_DISABLE_STDOUT}" ]; then
	LOG_DISABLE_STDOUT=false
fi

function log() {
	local level=${1}
	shift
	local message="$@"

	if [ -z "${DEBUG}" ] && [ "${level}" = "DEBUG" ]; then
		return
	fi

	# Set a prefix if we are in a hook.
	if [ -n "${HOOK}" ]; then
		message="${HOOK}: ${message}"
	fi

	logger -t "${LOG_FACILITY}[$$]" "${message}"

	# Leave here, when there should be no output on the console.
	[ "${LOG_DISABLE_STDOUT}" = "true" ] && return 0

	local colour
	local console=">&2"
	case "${level}" in
		DEBUG)
			colour="${CLR_CYAN_R}"
			;;
		INFO)
			colour="${CLR_BLACK_R}"
			console=""
			;;
		WARNING)
			colour="${CLR_YELLOW_R}"
			;;
		ERROR)
			colour="${CLR_RED_B}"
			;;
	esac

	printf "${colour}${message}${CLR_RESET_ALL}\n" ${console}
}
