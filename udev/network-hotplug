#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2011  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/network/functions

# Setup logging.
LOG_FACILITY="network-hotplug"

log DEBUG "Called with ACTION='${ACTION}', INTERFACE='${INTERFACE}'."

# Do nothing, if the network isn't running.
# That happens for example on boot time.
if ! network_is_running; then
	log DEBUG "network has not been started, yet. Exiting."
	exit 0
fi

# Check if the udev environment variables are properly set.
assert isset ACTION
assert isset INTERFACE

# Check, if the device is a physical network interface and
# if we can handle it.
if device_exists ${INTERFACE}; then
	if ! device_is_real ${INTERFACE}; then
		log DEBUG "Called for interface '${INTERFACE}' which is a virtual interface. Exiting."
		exit ${EXIT_OK}
	fi
fi

case "${ACTION}" in
	add|register)
		# Check, if there is a configuration for that device.
		if port_exists ${INTERFACE}; then
			port=${INTERFACE}

		# Create new configuration for _real_ network devices.
		elif device_is_real ${INTERFACE}; then
			# If the given device was not configured,
			# we create an initial configuration.
			port_create ethernet ${INTERFACE}

		# Dunno what to do in any other case.
		else
			exit 0
		fi

		zone=$(port_zone ${port})

		# Check, if the device is configured in a zone.
		# If not, there is nothing to do.
		isset zone || exit ${EXIT_OK}

		boot=$(zone_config_option ${zone} BOOT)
		if enabled boot; then
			zone_up ${zone}
		fi
		;;

	remove|unregister)
		# Do nothing.
		;;
esac

exit ${EXIT_OK}
