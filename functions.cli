#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

function cli_help_requested() {
	local argument="${1}"

	if [ -n "${argument}" ]; then
		if listmatch ${argument} help -h --help; then
			return ${EXIT_OK}
		fi
	fi

	return ${EXIT_ERROR}
}

function cli_zone_headline() {
	local zone=${1}

	cli_status_headline ${zone}
}

function cli_status_headline() {
	local zone=${1}

	local state="${COLOUR_DOWN}DOWN${COLOUR_NORMAL}"
	zone_is_up ${zone} && state="${COLOUR_UP}UP${COLOUR_NORMAL}"

	echo -e "${zone} - ${state} - $(zone_get_hook ${zone})"
}

function cli_headline() {
	local level=${1}
	shift

	local message="$@"
	local ident=$(cli_ident ${level})

	printf "${ident}${COLOUR_BOLD}$@${COLOUR_NORMAL}\n"
}

function cli_print() {
	local level=${1}
	local format=${2}
	shift 2

	local ident=$(cli_ident $(( ${level} + 1 )))

	local out
	printf -v out "${ident}${format}\n" "$@"
	printf "${out}"
}

function cli_print_fmt1() {
	local level=${1}
	shift

	local space=$(( 30 - (${level} * 4) ))
	local format="%-${space}s %s"

	cli_print ${level} "${format}" "$@"
}

function cli_print_bool() {
	if [ "${1}" = "${EXIT_TRUE}" ]; then
		echo "true"
	else
		echo "false"
	fi
}

function cli_print_yesno() {
	if [ "${1}" = "${EXIT_TRUE}" ]; then
		echo "yes"
	else
		echo "false"
	fi
}

function cli_space() {
	printf "\n"
}

function cli_ident() {
	local level=${1}
	shift

	local ident=""
	while [ ${level} -gt 1 ]; do
		ident="${ident}    "
		level=$(( ${level} - 1 ))
	done

	echo "${ident}"
}

function cli_yesno() {
	local message="$@ [y/n] "
	local yesno

	while true; do
		printf "\n${message}"
		read yesno

		# Check for "yes".
		if listmatch ${yesno} y Y yes YES Yes; then
			return ${EXIT_TRUE}

		# Check for "no".
		elif listmatch ${yesno} n N no NO No; then
			return ${EXIT_FALSE}
		fi
	done
}

function cli_get_key() {
	local key="${1%%=*}"
	echo "${key/--/}"
}

function cli_get_val() {
	echo "${@##*=}"
}

function cli_usage() {
	local command="$@"
	local basename="$(basename ${0})"

	if ! isset command; then
		command="${basename} help"
	fi

	echo "The given command was not understood by ${basename}." >&2
	echo "Please run '${command}' for detailed help." >&2
}

function cli_show_man() {
	local manpage=${1}
	assert isset manpage

	if ! binary_exists man; then
		error "The man package is not installed on this system."
		error "Please install 'man' in order to view the help."
		exit ${EXIT_ERROR}
	fi

	man ${manpage}
}
