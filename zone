#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2009  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /etc/init/functions
. /lib/network/functions

while [ "$#" -gt "0" ]; do
	case "${1}" in
		--zone=*)
			zone=${1#--zone=}
			;;
		*)
			action=${1}
			break
			;;		
	esac
	shift
done

if [ -z "${zone}" ] || [ -z "${action}" ]; then
	log_failure_msg "Wrong number of arguments."
	exit ${EXIT_ERROR}
fi

if ! zone_exists ${zone}; then
	echo "Zone ${zone} does not exist."
	exit ${EXIT_ERROR}
fi

case "$action" in
	start|up|reload)
		message="Bringing up zone ${zone}..."

		hooks_run_all pre-up ${CONFIG_ZONES}/${zone} --zone=${zone}

		if ! zone_is_up ${zone}; then	
			# Create and bring up the zone
			brctl addbr ${zone} || failed=1
			brctl stp ${zone} on || failed=1
			brctl setfd ${zone} 0 || failed=1
			ip link set ${zone} up || failed=1
			(exit ${failed})
			evaluate_retval standard
		fi

		# First bring up the ports to be able to start something like
		# a dhcp client that needs a running interface.
		hooks_run_ports post-up ${CONFIG_ZONES}/${zone} --zone=${zone}
		hooks_run_zones post-up ${CONFIG_ZONES}/${zone} --zone=${zone}
		;;

	stop|down)
		message="Bringing down zone ${zone}..."

		if zone_is_up ${zone}; then
			hooks_run_zones pre-down ${CONFIG_ZONES}/${zone} --zone=${zone}
			hooks_run_ports pre-down ${CONFIG_ZONES}/${zone} --zone=${zone}

			# Bring down the zone and delete it
			ip link set ${zone} down || failed=1
			brctl delbr ${zone} || failed=1
			(exit ${failed})
			evaluate_retval standard

			hooks_run_all post-down ${CONFIG_ZONES}/${zone} --zone=${zone}
		else
			log_warning_msg ${message}
			log_warning_msg "Zone ${zone} does not exist."
		fi
		;;

	*)
		exit 1
		;;	
esac
