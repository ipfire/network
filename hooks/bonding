#!/bin/sh
########################################################################
# Begin $NETWORK_DEVICES/services/bonding
#
# Description : Bonding Script
#
# Authors     : Michael Tremer - michael.tremer@ipfire.org
#
# Version     : 00.00
#
# Notes       : This script adds bonding support.
#
########################################################################

. /lib/network/hook-header

HOOK_NAME=bonding
HOOK_TYPE=port
HOOK_PRIO=50

DEFAULT_MODE=

function port_name() {
	echo "${zone}t+"
}

case "${action}" in
	help)
		;;

	info)
		echo "HOOK_NAME=${HOOK_NAME}"
		echo "HOOK_TYPE=${HOOK_TYPE}"
		;;

	pre-up)
		if ! grep -q ^bonding /proc/modules; then
			modprobe bonding
			echo "-bond0" > /sys/class/net/bonding_masters
		fi

		if device_exists ${MAC}; then
			device=$(devicify ${MAC})
			if ! device_is_bonding ${device}; then
				log_failure_msg "Device \"${device}\" is up, but not a bonding device."
				exit ${EXIT_ERR}
			fi
			exit ${EXIT_OK}
		fi

		device=$(device_get_free $(port_name))
		echo "+${device}" > /sys/class/net/bonding_masters
		ip link set ${device} address ${MAC}
	
		[ -n "${MODE}" ] && \
			echo "${MODE}" > /sys/class/net/${device}/bonding/mode

		echo "${MIIMON-100}" > /sys/class/net/${device}/bonding/miimon

		for slave in ${SLAVES}; do
			if device_exists ${slave}; then
				if device_is_up ${slave}; then
					log_warning_msg "Cannot enslave device \"${slave}\"."
					continue
				fi
				device_rename "$(devicify ${slave})" "${device}s+"
				echo "+$(devicify ${slave})" > /sys/class/net/${device}/bonding/slaves
			else
				log_warning_msg "Device ${slave} does not exist."
			fi
		done
	
		ip link set ${device} up
	
		log_success_msg "Setting up trunk ${MAC}..."
		;;

	post-up)
		device=$(devicify ${MAC})
		if ! zone_has_device_attached ${zone} ${device}; then
			zone_add_port ${zone} ${device}
		fi
		;;

	pre-down)
		device=$(devicify ${MAC})
		if zone_has_device_attached ${zone} ${device}; then
			zone_del_port ${zone} ${device}
		fi
		;;

	post-down)
		device=$(devicify ${MAC})
		if port_is_up ${device}; then
			MESSAGE="Pulling down trunk ${MAC}..."
			ip link set ${device} down
			evaluate_retval
			echo "-${device}" > /sys/class/net/bonding_masters
		fi
		;;

	add)
		MAC=$(mac_generate)
		MODE=${DEFAULT_MODE}

		while [ $# -gt 0 ]; do
			case "${1}" in
				--mac=*)
					MAC=${1#--mac=}
					;;
				--mode=*)
					MODE=${1#--mode=}
					;;
				*)
					SLAVES="${SLAVES} $(macify ${1})"
					;;
			esac
			shift
		done

		UUID=$(uuid)
		cat <<EOF > ${CONFIG_UUIDS}/${UUID}
HOOK="${HOOK_NAME}"
MAC="${MAC}"
MODE="${MODE}"
SLAVES="$(echo ${SLAVES})"
EOF
		ln -sf ${CONFIG_UUIDS}/${UUID} \
			${CONFIG_ZONES}/${zone}/${HOOK_NAME}-${UUID}

		log_success_msg "Configuration successfully saved!"
		echo    "      MAC address : ${MAC}"
		echo    "      Mode        : ${MODE}"
		echo    "      Slaves      : $(echo ${SLAVES})"
		;;

	rem)
		;;

	status)
		DEVICE=$(devicify ${MAC})
		echo -e "#  ${CLR_BOLD_CYN}Trunk ${DEVICE} (${MAC})${NORMAL}"
		if device_is_up ${MAC}; then
			 echo -e "#    State: ${CLR_BOLD_GRN}up${NORMAL}"
			 echo    "#"
			 for slave in $(</sys/class/net/${DEVICE}/bonding/slaves); do
			 	echo -e "#    ${CLR_BOLD_CYN}Slave port ${slave}${NORMAL}"

			 	echo -n "#      State: " 
			 	if device_is_up ${slave}; then
			 		echo -e "${CLR_BOLD_GRN}up${NORMAL}"
			 	else
			 		echo -e "${CLR_BOLD_RED}down${NORMAL}"
			 	fi

				echo -n "#      Link : "
				if device_has_carrier ${slave}; then
					echo -e "${CLR_BOLD_GRN}yes${NORMAL}"
				else
					echo -e "${CLR_BOLD_RED}no${NORMAL}" 
				fi
			 done
		else
			echo -e "#    State: ${CLR_BOLD_RED}down${NORMAL}"
		fi

		device_is_up ${MAC}
		exit ${?}
		;;

	*)
		echo "Usage: ${0} [interface] {up|down|add|remove|attach|detach|status}"
		exit 1
	;;
esac

# End $NETWORK_DEVICES/services/bonding
