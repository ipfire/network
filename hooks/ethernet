#!/bin/sh
########################################################################
# Begin $NETWORK_DEVICES/services/ethernet
#
# Description : Ethernet Script
#
# Authors     : Michael Tremer - michael.tremer@ipfire.org
#
# Version     : 00.00
#
# Notes       : This script adds ethernet support.
#
########################################################################

. /lib/network/hook-header

HOOK_NAME=ethernet
HOOK_TYPE=port

function port_name() {
	echo ${zone}p+
}

case "${action}" in
	help)
		echo -e "${BOLD}Hook (${HOOK_NAME}) help:"
		echo
		echo -e "    ${BOLD}Summary:${NORMAL}"
		echo    "        The ethernet-hook controls connection via ethernet."
		echo    "        You will need this to access your local lan."
		echo
		echo -e "    ${BOLD}Usage:${NORMAL}"
		#echo    "        --config=<FILE>"
		#echo    "            Includes a config file."
		#echo    "            Example: --config=/etc/sysconfig/network/green0/port-00:11:22:33:44:55"
		#echo    "        --port=<MAC or Name>"
		#echo    "            Passes the port to the script."
		#echo    "            Example: --port=port0 or --port=00:11:22:33:44:55"
		#echo    "        --zone=<zone>"
		#echo    "            Passes the zone to the script."
		#echo    "            Example: --zone=green0"
		#echo
		#echo -e "    ${BOLD}Commands:${NORMAL}"
		#echo
		echo     "        This hook only needs the name of the network device"
		echo     "        that should be attached to the zone."
		echo     "        The device identifier can either be a mac address or"
		echo     "        a device name."
		echo
		echo     "            Example: network zone addport green0 ethernet port0"
		echo     "                     network zone addport green0 ethernet 00:11:22:33:44:55"
		echo
		;;

	info)
		echo "HOOK_NAME=${HOOK_NAME}"
		echo "HOOK_TYPE=${HOOK_TYPE}"
		;;

	pre-up)
		device_is_up ${MAC} || ip link set $(devicify ${MAC}) up
		;;
	
	post-up)
		if zone_has_device_attached ${zone} $(get_device ${MAC}); then
			# Device is already attached to the bridge
			exit ${EXIT_OK}
		fi
		message="Attaching ethernet port ${MAC}..."
		device_rename $(get_device ${MAC}) $(port_name)
		zone_add_port ${zone} $(get_device_by_mac ${MAC})
		evaluate_retval
		;;
		
	pre-down)
		if zone_has_device_attached ${zone} $(get_device ${MAC}); then
			message="Detatching ethernet port ${MAC}..."
			zone_del_port ${zone} $(get_device_by_mac ${MAC})
			device_rename $(get_device_by_mac ${MAC}) ${COMMON_DEVICE}
			evaluate_retval
		fi
		;;
	
	post-down)
		## Possibly pull down the device (if there are no more vlan devices up...)
		;;

	add)
		### XXX error handling

		for dev in $@; do
			MAC=$(macify ${dev})
			UUID=$(uuid)
			cat <<EOF > ${CONFIG_UUIDS}/${UUID}
HOOK="${HOOK_NAME}"
MAC="${MAC}"
EOF
			ln -sf ${CONFIG_UUIDS}/${UUID} \
				${CONFIG_ZONES}/${zone}/${HOOK_NAME}-${UUID}

			log_success_msg "Configuration successfully saved!"
			echo    "      Device      : $(devicify ${MAC})"
			echo    "      MAC address : ${MAC}"
		done
		;;

	rem)
		# XXX to be done
		;;

	status)
		echo -e "#  ${CLR_BOLD_CYN}Ethernet port $(devicify ${MAC}) (${MAC})${NORMAL}"
		echo -n "#   State: "
		if device_is_up ${MAC}; then
			echo -e "${CLR_BOLD_GRN}up${NORMAL}"
		else
			echo -e "${CLR_BOLD_RED}down${NORMAL}"
		fi
		echo -n "#   Link : "
		if device_has_carrier ${MAC}; then
			echo -e "${CLR_BOLD_GRN}yes${NORMAL}"
		else
			echo -e "${CLR_BOLD_RED}no${NORMAL}" 
		fi
		echo "#"

		device_is_up ${MAC}
		exit ${?}
		;;

	*)
		echo "Usage: ${0} [interface] {up|down|add|remove|attach|detach|status}"
		exit 1
		;;
esac

# End $NETWORK_DEVICES/services/ethernet
