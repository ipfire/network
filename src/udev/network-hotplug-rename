#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2011  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

# Setup logging.
LOG_FACILITY="network-hotplug-rename"
LOG_DISABLE_STDOUT="true"

. /usr/lib/network/functions

# Read network settings
network_settings_read

# Check if the INTERFACE variable is properly set.
assert isset INTERFACE

# Log what we are doing here.
log DEBUG "Called for INTERFACE='${INTERFACE}'"

# Check if the device is already in use and
# prevent the script to touch it in any way.
if ! device_is_free ${INTERFACE}; then
	log ERROR "The device '${INTERFACE}' is in use"
	exit ${EXIT_ERROR}
fi

# Everything is wrapped into a function so that we can use locking on it
main() {
	# Check if the device has a unique MAC address (which is
	# what are using to uniquely identify an interface)
	local address="$(device_get_address "${INTERFACE}")"
	if isset address && [ "${address}" = "00:00:00:00:00:00" ]; then
		log DEBUG "Ignoring interface ${INTERFACE} with invalid MAC address ${address}"
		return ${EXIT_OK}
	fi

	# Determine the type of the device and then see what
	# we need to do with it.
	local type="$(device_get_type "${INTERFACE}")"

	log DEBUG "Interface '${INTERFACE}' is of type '${type}'"

	case "${type}" in
		ethernet)
			# Search within all the port configurations
			# if this port has already been configured.
			local port
			for port in $(ports_get_all); do
				port_cmd hotplug_rename "${port}" "${INTERFACE}" &>/dev/null
				if [ $? -eq ${EXIT_TRUE} ]; then
					print "${port}"
					exit ${EXIT_OK}
				fi
			done

			# Could not find a valid port configuration, creating a new one
			port="$(port_find_free "${PORT_PATTERN}")"
			assert isset port

			# Create a new port configuration with the new name
			if ! port_new "ethernet" "${port}" "${INTERFACE}"; then
				log ERROR "Could not create new port configuration for ${INTERFACE}"
				return ${EXIT_ERROR}
			fi

			print "${port}"
			;;
	esac

	return ${EXIT_OK}
}

# Run perform rename function exclusively
lock "${RUN_DIR}/.network-rename-lock" main || exit $?
