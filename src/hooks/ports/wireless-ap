#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/network/header-port

HOOK_SETTINGS="HOOK ADDRESS BROADCAST_SSID CHANNEL MODE PHY SSID"
HOOK_SETTINGS="${HOOK_SETTINGS} ENCRYPTION KEY"

ADDRESS=$(mac_generate)
BROADCAST_SSID=on
CHANNEL=1
ENCRYPTION=""
KEY=""
MODE="g"
SSID=

function hook_check() {
	assert isset ADDRESS
	assert ismac ADDRESS
	assert isset BROADCAST_SSID
	assert isbool BROADCAST_SSID
	assert isset CHANNEL
	assert isset MODE
	assert isoneof MODE a b g n
	assert isset PHY
	assert ismac PHY
	assert isset SSID

	if isset ENCRYPTION; then
		assert isoneof ENCRYPTION WPA WPA2 WPA/WPA2

		assert isset KEY
		assert [ ${#KEY} -ge 8 ]
		assert [ ${#KEY} -le 63 ]
	fi
}

function hook_create() {
	while [ $# -gt 0 ]; do
		case "${1}" in
			--broadcast-ssid=*)
				BROADCAST_SSID=$(cli_get_val ${1})
				;;
			--channel=*)
				CHANNEL=$(cli_get_val ${1})
				;;
			--encryption=*)
				ENCRYPTION=$(cli_get_val ${1})
				;;
			--key=*)
				KEY=$(cli_get_val ${1})
				;;
			--mac=*)
				ADDRESS=$(cli_get_val ${1})
				;;
			--mode=*)
				MODE=$(cli_get_val ${1})
				;;
			--phy=*)
				PHY=$(cli_get_val ${1})
				;;
			--ssid=*)
				SSID=$(cli_get_val ${1})
				;;
			*)
				warning "Ignoring unknown argument '${1}'"
				;;
		esac
		shift
	done

	# Save address of phy do identify it again
	PHY=$(phy_get ${PHY})
	PHY=$(phy_get_address ${PHY})

	local port=$(port_find_free ${PORT_PATTERN_ACCESSPOINT})
	assert isset port

	port_settings_write "${port}" ${HOOK_SETTINGS}

	exit ${EXIT_OK}
}

function hook_edit() {
	local port=${1}
	shift

	assert isset port

	port_settings_read "${port}" ${HOOK_SETTINGS}

	while [ $# -gt 0 ]; do
		case "${1}" in
			--broadcast-ssid=*)
				BROADCAST_SSID=$(cli_get_val ${1})
				;;
			--channel=*)
				CHANNEL=$(cli_get_val ${1})
				;;
			--encryption=*)
				ENCRYPTION=$(cli_get_val ${1})
				;;
			--key=*)
				KEY=$(cli_get_val ${1})
				;;
			--ssid=*)
				SSID=$(cli_get_val ${1})
				;;
			--mode=*)
				MODE=$(cli_get_val ${1})
				;;
			*)
				warning "Unknown argument '${1}'"
				;;
		esac
		shift
	done

	port_settings_write "${port}" ${HOOK_SETTINGS}

	exit ${EXIT_OK}	
}

function hook_up() {
	local port=${1}
	assert isset port

	port_settings_read "${port}" ${HOOK_SETTINGS}

	# Check if the PHY is present.
	local phy=$(phy_get ${PHY})
	if ! isset phy; then
		log DEBUG "phy '${PHY}' is not present"
		exit ${EXIT_ERROR}
	fi

	# Create the wireless device, if it does not exist, yet.
	if ! device_exists ${port}; then
		wireless_create ${port} --phy="${phy}" --type="ap" \
			--address="${ADDRESS}"
	fi

	# Start the hostapd service.
	hostapd_start ${port}
	local ret=$?

	if [ ${ret} -ne ${EXIT_OK} ]; then
		log ERROR "Could not start hostapd on port '${port}': ${ret}"
		exit ${EXIT_ERROR}
	fi

	exit ${EXIT_OK}
}

function hook_down() {
	local port=${1}
	assert isset port

	# Stop the hostapd daemon.
	hostapd_stop ${port}

	# Remove the device if it is still present.
	if device_exists ${port}; then
		wireless_remove ${port}
	fi

	exit ${EXIT_OK}
}

function hook_hotplug() {
	local port=${1}
	assert isset port

	local phy=${2}
	assert isset phy

	assert port_exists ${port}

	# Read configuration of port.
	port_settings_read "${port}" ${HOOK_SETTINGS}

	# Get the address of the phy.
	local phy_address=$(phy_get_address ${phy})

	# Check if the phy is the same we have
	# read from the configuration file.
	if [ "${PHY}" = "${phy_address}" ]; then
		wireless_create ${port} --phy="${phy_address}" --type="ap" \
			--address="${ADDRESS}"

		exit ${EXIT_OK}
	fi

	exit ${EXIT_NOT_HANDLED}
}
