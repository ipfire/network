#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/network/header-port

HOOK_SETTINGS=(
	"ADDRESS"
	"MIIMON"
	"MODE"
	"OFFLOADING"
	"SLAVES"
)

DEFAULT_MIIMON=100
DEFAULT_MODE="balance-rr"

hook_check_settings() {
	assert isset ADDRESS
	assert ismac ADDRESS

	#assert isset SLAVES
	assert isinteger MIIMON
}

hook_parse_cmdline() {
	while [ $# -gt 0 ]; do
		case "${1}" in
			--address=*)
				ADDRESS="$(cli_get_val "${1}")"

				if ! mac_is_valid "${ADDRESS}"; then
					error "Invalid MAC address: ${ADDRESS}"
					return ${EXIT_ERROR}
				fi
				;;

			--miimon=*)
				MIIMON=$(cli_get_val "${1}")
				;;
			--mode=*)
				MODE=$(cli_get_val "${1}")
				;;
			--offloading=*)
				OFFLOADING="$(cli_get_val "${1}")"

				if enabled OFFLOADING; then
					OFFLOADING="on"
				elif disabled OFFLOADING; then
					OFFLOADING="off"
				else
					error "Invalid value for offloading: ${OFFLOADING}"
					return ${EXIT_ERROR}
				fi
				;;
			+*)
				local slave=$(cli_get_val "${1:1}")

				if port_exists "${slave}"; then
					if list_match "${slave}" ${SLAVES}; then
						warning "Port ${slave} is already enslaved"
					else
						list_append SLAVES "${slave}"
					fi
				else
					warning "Port ${slave} does not exist"
				fi
				;;
			-*)
				local slave=$(cli_get_val "${1:1}")
				if ! list_remove SLAVES "${slave}"; then
					warning "Port ${slave} is not a slave of this bonding device"
				fi
				;;
			*)
				warning "Unknown argument '${1}'"
				;;
		esac
		shift
	done

	if isset ADDRESS; then
		if ! ismac ADDRESS; then
			error "The given MAC address is invalid: ${ADDRESS}"
			return ${EXIT_ERROR}
		fi
	else
		ADDRESS=$(mac_generate)
	fi
}

hook_new() {
	if ! hook_parse_cmdline "$@"; then
		return ${EXIT_ERROR}
	fi

	# Find a new name
	local port=$(port_find_free ${BONDING_PORT_PATTERN})
	assert isset port

	# Save configuration
	if port_settings_write "${port}"; then
		log INFO "New port ${port} has been created"
	else
		error "Could not save configuration for ${port}"
		return ${EXIT_ERROR}
	fi

	return ${EXIT_OK}
}

hook_edit() {
	local port=${1}

	if ! hook_default_edit "$@"; then
		return ${EXIT_ERROR}
	fi

	# If the master device is up, make sure that all
	# slaves are up, too
	if device_exists "${port}"; then
		# Setting the mode requires us to destroy the device
		# and to recreate it again.
		local mode=$(bonding_get_mode "${port}")
		if [ "${mode}" != "${MODE}" ]; then
			port_restart "${port}"
			return ${EXIT_OK}
		fi

		# Set address
		device_set_address "${port}" "${ADDRESS}"

		# Set miimon
		bonding_set_miimon "${port}" "${MIIMON}"

		local slave
		for slave in ${SLAVES}; do
			if device_exists "${slave}"; then
				bonding_enslave_device "${port}" "${slave}"
			else
				port_create "${slave}"
			fi
		done
	fi
}

hook_create() {
	local port="${1}"
	assert isset port

	# Exit silently if the device already exists
	device_exists "${port}" && exit ${EXIT_OK}

	port_settings_read "${port}"

	# Create the bonding devices
	bonding_create "${port}" \
		--address="${ADDRESS}" \
		--mode="${MODE}" || exit ${EXIT_ERROR}

	bonding_set_miimon "${port}" "${MIIMON}"

	exit ${EXIT_OK}
}

hook_remove() {
	local port="${1}"
	assert isset port

	port_settings_read "${port}"

	# Remove the bonding device
	if device_exists "${port}"; then
		bonding_remove "${port}"
	fi
}

hook_up() {
	local port="${1}"
	assert isset port

	port_settings_read "${port}"

	# Auto-enable or disable hardware offloading
	if ! isset OFFLOADING || enabled OFFLOADING; then
		offloading_auto "${port}"
	else
		offloading_disable_all "${port}"
	fi

	# Execute the default action
	hook_default_up "${port}"

	# Bring up all slaves
	local slave
	for slave in $(unquote ${SLAVES}); do
		port_up "${slave}"
	done
}

hook_down() {
	local port="${1}"
	assert isset port

	port_settings_read "${port}"

	# Bring down all slaves
	local slave
	for slave in $(unquote ${SLAVES}); do
		port_down "${slave}"
	done

	# Execute the default action
	hook_default_down "${port}"
}

hook_hotplug() {
	local port="${1}"
	assert isset port

	case "$(hotplug_action)" in
		add)
			# Handle events of the same interface
			if hotplug_event_port_is_interface "${port}"; then
				# Read configuration
				port_settings_read "${port}"

				# Bring up all slaves
				# Attach those which already exist and try to create
				# those which don't exist yet. They will be attached
				# in their own hotplug event.
				local slave
				for slave in $(unquote ${SLAVES}); do
					if device_exists "${slave}"; then
						bonding_enslave_device "${port}" "${slave}"
					else
						port_create "${slave}"
					fi
				done

				exit ${EXIT_OK}

			# Handle slave devices that have just been created and
			# attach them.
			elif hotplug_event_interface_is_slave_of_port "${port}"; then
				bonding_enslave_device "${port}" "${INTERFACE}"

				# If the parent device has been set up, we will
				# bring up the slave device as well.
				if device_is_up "${port}"; then
					port_up "${INTERFACE}"
				fi
			fi

			exit ${EXIT_OK}
			;;

		remove)
			if hotplug_event_port_is_interface "${port}"; then
				# Bring down all slaves after the parent device went away
				local slave
				for slave in $(port_get_slaves "${port}"); do
					port_remove "${slave}"
				done

				exit ${EXIT_OK}
			fi
			;;
	esac

	exit ${EXIT_NOT_HANDLED}
}
