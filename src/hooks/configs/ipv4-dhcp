#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/network/header-config

HOOK_CONFIG_SETTINGS="HOOK DELAY"

# Default settings.
DELAY=0

hook_check_config_settings() {
	assert isset DELAY
	assert isinteger DELAY
}

hook_new() {
	local zone="${1}"
	shift

	while [ $# -gt 0 ]; do
		case "${1}" in
			--delay=*)
				DELAY="$(cli_get_val "${1}")"
				;;
		esac
		shift
	done

	zone_config_settings_write "${zone}" "${HOOK}"

	exit ${EXIT_OK}
}

hook_up() {
	local zone=${1}
	local config=${2}
	shift 2

	if ! device_exists ${zone}; then
		error "Zone '${zone}' doesn't exist."
		exit ${EXIT_ERROR}
	fi

	# Start dhclient for IPv4 on this zone.
	dhclient_start ${zone} ipv4

	exit ${EXIT_OK}
}

hook_down() {
	local zone=${1}
	local config=${2}
	shift 2

	if ! device_exists ${zone}; then
		error "Zone '${zone}' doesn't exist."
		exit ${EXIT_ERROR}
	fi

	# Stop dhclient for IPv4 on this zone.
	dhclient_stop ${zone} ipv4

	exit ${EXIT_OK}
}

hook_status() {
	local zone=${1}
	local config=${2}
	shift 2

	if ! device_exists ${zone}; then
		error "Zone '${zone}' doesn't exist."
		exit ${EXIT_ERROR}
	fi

	zone_config_settings_read "${zone}" "${config}"

	local status
	if dhclient_status ${zone} ipv4; then
		status="${MSG_HOOK_UP}"
	else
		status="${MSG_HOOK_DOWN}"
	fi
	cli_statusline 3 "${HOOK}" "${status}"

	cli_print_fmt1 3 "IPv4 address" "$(db_get "${zone}/ipv4/local-ip-address")"
	local gateway="$(db_get "${zone}/ipv4/remote-ip-address")"
	if isset gateway; then
		cli_print_fmt1 3 "Gateway" "${gateway}"
		cli_space
	fi
	local dns_servers="$(db_get "${zone}/ipv4/domain-name-servers")"
	if isset dns_servers; then
		cli_print_fmt1 3 "DNS-Servers" "${dns_servers}"
		cli_space
	fi

	exit ${EXIT_OK}
}
