#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/network/header-config

HOOK_CONFIG_SETTINGS="HOOK ADDRESS PREFIX GATEWAY"

hook_check_config_settings() {
	assert isset ADDRESS
	assert isinteger PREFIX

	if [ ${PREFIX} -gt 64 ]; then
		error "PREFIX is greater than 64."
		exit ${EXIT_ERROR}
	fi
}

hook_parse_cmdline() {
	while [ $# -gt 0 ]; do
		case "${1}" in
			--address=*)
				ADDRESS=${1#--address=}
				;;
			--prefix=*)
				PREFIX=${1#--prefix=}
				;;
			--gateway=*)
				GATEWAY=${1#--gateway=}
				;;
		esac
		shift
	done

	# Store IPv6 address in small format.
	ADDRESS=$(ipv6_format "${ADDRESS}")

	if [ -n "${GATEWAY}" ]; then
		GATEWAY=$(ipv6_format "${GATEWAY}")
	fi
}

hook_new() {
	local zone=${1}
	shift

	if ! hook_parse_cmdline $@; then
		# Return an error if the parsing of the cmd line fails
		return ${EXIT_ERROR}
	fi

	zone_config_settings_write "${zone}" "${HOOK}"

	exit ${EXIT_OK}
}

hook_up() {
	local zone=${1}
	local config=${2}
	shift 2

	if ! device_exists ${zone}; then
		error "Zone '${zone}' doesn't exist."
		exit ${EXIT_ERROR}
	fi
	
	zone_config_settings_read "${zone}" "${config}"

	ip_address_add ${zone} ${ADDRESS}/${PREFIX}

	db_set "${zone}/ipv6/local-ip-address" "${ADDRESS}/${PREFIX}"
	db_set "${zone}/ipv6/remote-ip-address" "${GATEWAY}"
	db_set "${zone}/ipv6/active" 1

	routing_default_update

	exit ${EXIT_OK}
}

hook_down() {
	local zone=${1}
	local config=${2}
	shift 2

	if ! device_exists ${zone}; then
		error "Zone '${zone}' doesn't exist."
		exit ${EXIT_ERROR}
	fi

	# Remove routing information from database.
	db_delete "${zone}/ipv6"
	
	zone_config_settings_read "${zone}" "${config}"

	ip_address_del ${zone} ${ADDRESS}/${PREFIX}

	# Update routing tables.
	routing_default_update

	exit ${EXIT_OK}
}

hook_status() {
	local zone=${1}
	local config=${2}
	shift 2

	if ! device_exists ${zone}; then
		error "Zone '${zone}' doesn't exist."
		exit ${EXIT_ERROR}
	fi
	
	zone_config_settings_read "${zone}" "${config}"

	# Make sure ADDRESS is as short as possible.
	ADDRESS=$(ipv6_format "${ADDRESS}")

	local status
	if zone_has_ip ${zone} ${ADDRESS}/${PREFIX}; then
		status=${MSG_HOOK_UP}
	else
		status=${MSG_HOOK_DOWN}
	fi
	cli_statusline 3 "${HOOK}" "${status}"

	cli_print_fmt1 3 "IPv6 address" "${ADDRESS}/${PREFIX}"
	if [ -n "${GATEWAY}" ]; then
		cli_print_fmt1 3 "Gateway" "${GATEWAY}"
	fi
	cli_space

	exit ${EXIT_OK}
}
