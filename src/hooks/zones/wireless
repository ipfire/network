#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2010  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/network/header-zone

HOOK_SETTINGS=(
	"ADDRESS"
	"PHY"
)

hook_check_settings() {
	assert ismac ADDRESS
	assert ismac PHY
}

hook_parse_cmdline() {
	while [ $# -gt 0 ]; do
		case "${1}" in
			--address=*)
				ADDRESS=$(cli_get_val "${1}")
				;;
			--phy=*)
				PHY=$(cli_get_val "${1}")
				;;
			*)
				warning "Unrecognized option: ${1}"
				;;
		esac
		shift
	done

	# Just save the MAC address of the phy.
	PHY=$(phy_get ${PHY})
	PHY=$(phy_get_address ${PHY})

	# Generate a random MAC address if none given
	if ! isset ADDRESS; then
		ADDRESS="$(mac_generate)"
	fi
}

hook_up() {
	local zone=${1}
	assert isset zone

	# Read zone configuration.
	zone_settings_read "${zone}"

	#  Create the wireless interface
	if ! device_exists "${zone}"; then
		wireless_create "${zone}" \
			--phy=${PHY} \
			--type="managed" \
			--address="${ADDRESS}" \
		|| return $?
	fi

	# Write WPA supplicant configuration
	if ! wireless_networks_write_wpa_supplicant_configuration "${zone}"; then
		log ERROR "Could not write WPA supplicant configuration for ${zone}"
		return ${EXIT_ERROR}
	fi

	# Start the WPA supplicant daemon.
	wpa_supplicant_start ${zone}

	zone_configs_up ${zone}

	return ${EXIT_OK}
}

hook_down() {
	local zone=${1}
	shift

	if ! device_is_up ${zone}; then
		warning "Zone '${zone}' is not up"
		exit ${EXIT_OK}
	fi

	zone_configs_down ${zone}

	wpa_supplicant_stop ${zone}

	# Remove WPA supplicant configuration
	wpa_supplicant_config_destroy "${zone}"

	wireless_remove ${zone}

	exit ${EXIT_OK}
}

hook_status() {
	local zone=${1}
	assert isset zone

	# Print the default header.
	cli_device_headline ${zone}

	# Exit if zone is down
	if ! zone_is_up ${zone}; then
		echo # Empty line
		exit ${EXIT_ERROR}
	fi

	if wireless_client_is_connected "${zone}"; then
		cli_headline 2 "Wireless network information"
		cli_print_fmt1 2 "SSID" "$(wpa_cli_status_get ${zone} ssid)"
		cli_space

		cli_headline 3 "Access Point"
		local bssid=$(wpa_cli_status_get ${zone} bssid)
		assert isset bssid

		local frequency=$(wpa_cli_bss_get_frequency "${zone}" "${bssid}")
		cli_print_fmt1 3 "Channel" "$(wireless_frequency_to_channel ${frequency}) (${frequency} MHz)"
		cli_print_fmt1 3 "BSSID" "${bssid}"
		cli_print_fmt1 3 "Noise" \
			"$(wpa_cli_bss_get_noise ${zone} ${bssid})"
		cli_print_fmt1 3 "Quality" \
			"$(wpa_cli_bss_get_quality ${zone} ${bssid})%%"
		cli_print_fmt1 3 "Flags" \
			"$(wpa_cli_bss_get_flags ${zone} ${bssid})"
		cli_space

		cli_headline 3 "Encryption"
		cli_print_fmt1 3 "Mode" \
			"$(wpa_cli_status_get ${zone} key_mgmt)"
		cli_print_fmt1 3 "Pairwise cipher" \
			"$(wpa_cli_status_get ${zone} pairwise_cipher)"
		cli_print_fmt1 3 "Group cipher" \
			"$(wpa_cli_status_get ${zone} group_cipher)"
		cli_space
	fi

	cli_headline 2 "Configurations"
	zone_configs_cmd status ${zone}
	cli_space

	exit ${EXIT_OK}
}
